{"version":3,"sources":["components/Button.js","components/Form.js","components/TableRecords.js","App.js","serviceWorker.js","index.js"],"names":["ButtonContainer","styled","button","Form","state","firstName","firstNameError","lastName","lastNameError","change","e","setState","target","name","value","validate","isError","errors","length","onSubmit","preventDefault","props","classes","this","Card","className","style","borderRadius","root","noValidate","autoComplete","TextField","required","id","placeholder","variant","color","inputProps","textTransform","onChange","errortext","type","onClick","React","Component","withStyles","theme","margin","spacing","width","data","header","handleDelete","Container","TableContainer","component","Paper","size","aria-label","Table","class","TableHead","TableRow","map","x","i","TableCell","key","TableBody","y","k","prop","Button","DeleteSweepRounded","row","App","filter","j","submission","TableRecords","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u3BAEO,IAAMA,E,MAAkBC,EAAOC,OAAV,KCctBC,E,4MAEFC,MAAQ,CACJC,UAAW,GACXC,eAAgB,GAChBC,SAAU,GACVC,cAAe,I,EAGjBC,OAAS,SAAAC,GAEP,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAI9BC,SAAW,WACT,IAAIC,GAAU,EACRC,EAAS,CACbX,eAAgB,GAChBE,cAAe,IAkBjB,OAfI,EAAKJ,MAAMC,UAAUa,OAAS,IAChCF,GAAU,EACVC,EAAOX,eAAiB,qBAGtB,EAAKF,MAAMG,SAASW,OAAS,IAC7BF,GAAU,EACVC,EAAOT,cAAgB,qBAG3B,EAAKG,SAAL,2BACK,EAAKP,OACLa,IAGED,G,EAGTG,SAAW,SAAAT,GACTA,EAAEU,iBACU,EAAKL,aAEf,EAAKM,MAAMF,SAAS,EAAKf,OAEzB,EAAKO,SAAS,CACZN,UAAW,GACXC,eAAgB,GAChBC,SAAU,GACVC,cAAe,O,uDAKf,IAAD,OAECc,EAAYC,KAAKF,MAAjBC,QAER,OACE,kBAACE,EAAA,EAAD,CAAMC,UAAU,kEAAkEC,MAAO,CAACC,aAAc,SAClG,yBAAKF,UAAU,OACb,iDACA,qDAEN,0BAAMA,UAAWH,EAAQM,KACrBC,YAAU,EAACC,aAAa,OAG1B,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHR,UAAU,iBACVZ,KAAK,YACLqB,YAAY,aACZC,QAAQ,WACRC,MAAM,YACNC,WAAY,CAACX,MAAO,CAACY,cAAe,eACpCxB,MAAOS,KAAKnB,MAAMC,UAClBkC,SAAU,SAAA7B,GAAC,OAAI,EAAKD,OAAOC,IAC3B8B,UAAWjB,KAAKnB,MAAME,iBAExB,6BACA,kBAACyB,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHR,UAAU,iBACVZ,KAAK,WACLqB,YAAY,YACZC,QAAQ,WACRC,MAAM,YACNC,WAAY,CAACX,MAAO,CAACY,cAAe,eAGpCxB,MAAOS,KAAKnB,MAAMG,SAClBgC,SAAU,SAAA7B,GAAC,OAAI,EAAKD,OAAOC,IAC3B8B,UAAWjB,KAAKnB,MAAMI,gBAExB,6BACA,6BACA,kBAACR,EAAD,CACGyB,UAAU,OACVgB,KAAK,SACL3B,MAAM,SACN4B,QAAS,SAAAhC,GAAC,OAAI,EAAKS,SAAST,KAJ/B,gB,GArGSiC,IAAMC,WAmHVC,eA5HG,SAAAC,GAAK,MAAK,CAC1BlB,KAAM,CACJ,uBAAwB,CACtBmB,OAAQD,EAAME,QAAQ,GACtBC,MAAO,YAwHEJ,CAAsB1C,G,iFC9FtB,kBACX+C,EADW,EACXA,KACAC,EAFW,EAEXA,OACAC,EAHW,EAGXA,aAHW,OAKX,kBAACC,EAAA,EAAD,CAAW5B,UAAU,mBAErB,kBAAC6B,EAAA,EAAD,CACEC,UAAWC,IACVC,KAAK,QAAQC,aAAW,kBAGvB,kBAACC,EAAA,EAAD,CAAOC,MAAM,sBACT,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACKX,EAAOY,KAAI,SAACC,EAAGC,GAAJ,OACZ,kBAACC,EAAA,EAAD,CACIC,IAAG,uBAAkBF,GACrBxC,UAAU,eAETuC,EAAEnD,WAKX,kBAACuD,EAAA,EAAD,CACI3C,UAAU,cAETyB,EAAKa,KAAI,SAACC,EAAGC,GAAJ,OApDd,SACRD,EACAC,EACAd,EACAC,GAJQ,OAKR,kBAACU,EAAA,EAAD,CAAUK,IAAG,mBAAcF,IACtBd,EAAOY,KAAI,SAACM,EAAGC,GAAJ,OACR,kBAACJ,EAAA,EAAD,CAAWC,IAAG,uBAAkBG,IAC3BN,EAAEK,EAAEE,UAGb,kBAACL,EAAA,EAAD,KACI,kBAACM,EAAA,EAAD,CACI3D,KAAK,SACLsB,QAAQ,SACRO,QAAS,kBAAMU,EAAaa,KAC5B,kBAACQ,EAAA,EAAD,SAqCIC,CACIV,EACAC,EACAd,EACAC,UCaTuB,E,kDAnEb,WAAYtD,GAAQ,IAAD,8BACjB,cAAMA,IAaV+B,aAAe,SAAAa,GACb,EAAKtD,UAAS,SAAAP,GAAK,MAAK,CACtB8C,KAAM9C,EAAM8C,KAAK0B,QAAO,SAACF,EAAKG,GAAN,OAAYA,IAAMZ,UAb1C,EAAK7D,MAAQ,CACX8C,KAAM,IAJS,E,qDAqBT,IAAD,OAGP,OACE,yBAAKzB,UAAU,WAEb,2BAAOA,UAAU,iBACf,kBAAC4B,EAAA,EAAD,CAAW5B,UAAU,OACnB,kBAAC,EAAD,CACEN,SAAU,SAAA2D,GAAU,OAClB,EAAKnE,SAAS,CACZuC,KAAK,GAAD,mBAAM,EAAK9C,MAAM8C,MAAjB,CAAuB4B,WAMrC,2BAAOrD,UAAU,iBACf,kBAAC4B,EAAA,EAAD,KACE,wBAAI5B,UAAU,gBAAd,WAEA,kBAACsD,EAAD,CACE7B,KAAM3B,KAAKnB,MAAM8C,KACjBzB,UAAU,UACV2B,aAAc7B,KAAK6B,aAEnBD,OAAQ,CACN,CACEtC,KAAM,aACN0D,KAAM,aAER,CACE1D,KAAM,YACN0D,KAAM,sB,GAxDN3B,aCFEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f47d99bf.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const ButtonContainer = styled.button`\r\n  text-transform: uppercase;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  background: var(--darkPink);\r\n  font-family: 'Montseratt', sans-serif !important;\r\n  border: none;\r\n  color: var(--mainWhite);\r\n  padding: 1rem 1rem;\r\n  cursor:pointer;\r\n  transition: all 0.3s ease-in-out;\r\n  border-radius: 5rem;\r\n\r\n  &:hover{\r\n    background: var(--mainYellow);\r\n    color: var(--mainDark);\r\n    border: none;\r\n  }\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`\r\n\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { ButtonContainer } from './Button'\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n});\r\n\r\nclass Form extends React.Component {\r\n\r\n    state = {\r\n        firstName: \"\",\r\n        firstNameError: \"\",\r\n        lastName: \"\",\r\n        lastNameError: \"\"\r\n      };\r\n    \r\n      change = e => {\r\n        // this.props.onChange({ [e.target.name]: e.target.value });\r\n        this.setState({\r\n          [e.target.name]: e.target.value\r\n        });\r\n      };\r\n    \r\n      validate = () => {\r\n        let isError = false;\r\n        const errors = {\r\n          firstNameError: \"\",\r\n          lastNameError: \"\",\r\n        };\r\n    \r\n        if (this.state.firstName.length < 3) {\r\n          isError = true;\r\n          errors.firstNameError = \"Enter valid name.\";\r\n        }\r\n    \r\n        if (this.state.lastName.length < 2) {\r\n            isError = true;\r\n            errors.lastNameError = \"Enter valid name.\";\r\n          }\r\n    \r\n        this.setState({\r\n          ...this.state,\r\n          ...errors\r\n        });\r\n    \r\n        return isError;\r\n      };\r\n\r\n      onSubmit = e => {\r\n        e.preventDefault();\r\n        const err = this.validate();\r\n        if (!err) {\r\n          this.props.onSubmit(this.state);\r\n          // clear form\r\n          this.setState({\r\n            firstName: \"\",\r\n            firstNameError: \"\",\r\n            lastName: \"\",\r\n            lastNameError: \"\"\r\n          });\r\n        }\r\n      };\r\n////////////////////////////////////////////////////////////////    \r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n                \r\n    return (\r\n      <Card className=\"container-input mx-auto d-flex align-items-center boxShadow={3}\" style={{borderRadius: 30 + 'px'}} >\r\n            <div className=\"m-5\">\r\n              <h1>LET'S GET STARTED</h1>\r\n              <p >Hi! What's your name?</p>\r\n              </div>\r\n        <form className={classes.root} \r\n            noValidate autoComplete=\"off\"  \r\n        >\r\n            \r\n          <TextField\r\n            required\r\n            id=\"outlined-required\"\r\n            className=\"m-2 input-text\"\r\n            name=\"firstName\"\r\n            placeholder=\"First Name\"\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            inputProps={{style: {textTransform: 'capitalize'}}}\r\n            value={this.state.firstName}\r\n            onChange={e => this.change(e)}\r\n            errortext={this.state.firstNameError}\r\n          />\r\n          <br />\r\n          <TextField\r\n            required\r\n            id=\"outlined-required\"\r\n            className=\"m-2 input-text\"\r\n            name=\"lastName\"\r\n            placeholder=\"Last Name\"\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            inputProps={{style: {textTransform: 'capitalize'}}} \r\n            // value={this.props.newlastName}\r\n            // onChange={this.props.handleInputChange}\r\n            value={this.state.lastName}\r\n            onChange={e => this.change(e)}\r\n            errortext={this.state.lastNameError}\r\n          />\r\n          <br />\r\n          <br />\r\n          <ButtonContainer\r\n             className=\"mb-4\"\r\n             type=\"submit\" \r\n             value=\"Submit\"\r\n             onClick={e => this.onSubmit(e)} \r\n          >\r\n            SUBMIT\r\n          </ButtonContainer>\r\n        </form>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(Form)","import React from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableContainer,\r\n  Paper\r\n} from \"@material-ui/core\";\r\nimport { DeleteSweepRounded } from '@material-ui/icons';\r\nimport { Container, Button } from 'react-bootstrap';\r\n\r\nconst row = (\r\n    x,\r\n    i, \r\n    header,\r\n    handleDelete) => \r\n    <TableRow key={`tableRow-${i}`}>\r\n        {header.map((y, k) =>\r\n            <TableCell key={`tableRowCell-${k}`}>\r\n                {x[y.prop]}\r\n            </TableCell>\r\n    )}\r\n        <TableCell>\r\n            <Button\r\n                name=\"action\"\r\n                variant=\"danger\"\r\n                onClick={() => handleDelete(i)}>\r\n                <DeleteSweepRounded/>\r\n                \r\n            </Button>\r\n        </TableCell>\r\n    </TableRow>;\r\n\r\n\r\n\r\nexport default ({ \r\n    data, \r\n    header,\r\n    handleDelete\r\n}) =>\r\n    <Container className=\"container-table\">\r\n      \r\n    <TableContainer \r\n      component={Paper}\r\n       size=\"small\" aria-label=\"a dense table\">\r\n    </TableContainer>\r\n\r\n        <Table class=\"mx-auto text-light\">\r\n            <TableHead>\r\n            <TableRow>\r\n                {header.map((x, i) =>\r\n                <TableCell \r\n                    key={`tableRowHead-${i}`}\r\n                    className=\"text-yellow\"\r\n                >\r\n                    {x.name}\r\n                </TableCell>\r\n                )}\r\n            </TableRow>\r\n            </TableHead>\r\n            <TableBody\r\n                className=\"text-light\">\r\n                 \r\n                {data.map((x, i) => \r\n                    row(\r\n                        x, \r\n                        i, \r\n                        header,\r\n                        handleDelete\r\n                ))}\r\n            </TableBody>\r\n        </Table>\r\n    \r\n    </Container>","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\n//import TextField from '@material-ui/core/TextField';\nimport Form from \"./components/Form\";\nimport TableRecords from './components/TableRecords';\n// import { \n//   Select, \n//   MenuItem,\n//   FormControl,\n//   //InputLabel,\n//   FormHelperText\n// } from '@material-ui/core';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n    };\n    \n  };\n\n  // state = {\n  //   data: []\n  // };\n\n\nhandleDelete = i => {\n  this.setState(state => ({\n    data: state.data.filter((row, j) => j !== i)\n  }));\n};\n\n\n  render() {\n\n\n    return (\n      <div className=\"wrapper\">\n\n        <aside className=\"aside aside-1\">\n          <Container className=\"p-5\" >\n            <Form \n              onSubmit={submission =>\n                this.setState({\n                  data: [...this.state.data, submission]\n                })}\n            />\n          </Container>\n        </aside>\n\n        <aside className=\"aside aside-2\">\n          <Container>\n            <h1 className=\"table-header\">RECORDS</h1> \n            \n            <TableRecords\n              data={this.state.data}\n              className=\"my-auto\"\n              handleDelete={this.handleDelete}\n              \n              header={[\n                {\n                  name: \"First Name\",\n                  prop: \"firstName\"\n                },\n                {\n                  name: \"Last Name\",\n                  prop: \"lastName\"\n                }\n              ]}\n            />\n            \n          </Container>\n        </aside>\n      </div>\n  \n    );\n            }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}